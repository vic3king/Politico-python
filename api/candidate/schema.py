from api.office.schema import Office
import graphene
from graphql import GraphQLError
from sqlalchemy import desc
from graphene_sqlalchemy import (SQLAlchemyObjectType)
from sqlalchemy import and_

from api.office.models import Office
from api.party.models import Party
from api.candidate.model import Candidate as CandidateModel
from helpers.auth.error_handler import SaveContextManager
from helpers.filters import filter_office_id, filter_party_id

# decorators
from helpers.auth.auth import Authentication, return_logged_in_users_id


class Candidate(SQLAlchemyObjectType):
    """
        Autogenerated return type of a office
    """
    class Meta:
        model = CandidateModel


class CreateCandidate(graphene.Mutation):
    """
        Mutation to create a candidate
    """
    class Arguments:
        office_id = graphene.Int(required=True)
        party_id = graphene.Int(required=True)

    candidate = graphene.Field(Candidate)

    @Authentication.login_required
    @Authentication.user_roles(['politician', 'admin'])
    def mutate(self, info, **kwargs):

        user_id = return_logged_in_users_id()
        party_id = kwargs['party_id']
        office_id = kwargs['office_id']

        candidate = CandidateModel(
            office_id=office_id,
            party_id=party_id,
            user_id=user_id
        )

        filter_office_id(info, office_id)
        filter_party_id(info, party_id)
        query = Candidate.get_query(info)

        party_has_candidate = query.filter(
            CandidateModel.party_id == party_id, CandidateModel.office_id == office_id).first()
        candidate_query = query.filter(
            CandidateModel.user_id == user_id).first()
        if candidate_query:
            raise GraphQLError('this candidate is already running for office')
        if party_has_candidate:
            raise GraphQLError('party already has a candidate')

        payload = {
            'model': CandidateModel,
            'field': 'user_id',
            'value': user_id
        }
        with SaveContextManager(candidate, 'Candidate name', payload):
            return CreateCandidate(candidate=candidate)


class Mutation(graphene.ObjectType):
    """
        Mutation to register a candidate for an electoral office
    """
    create_candidate = CreateCandidate.Field(
        description="Creates a candidate for an electoral office with the false status, pending acceptance from an administrator\
            \n- office_id: Unique Identifier for a political office [required]\
            \n- party_id: Unique Identifier for a political party [required]\
            "
    )
