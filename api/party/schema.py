import os
import graphene
from graphql import GraphQLError
from sqlalchemy import desc
from graphene_sqlalchemy import (SQLAlchemyObjectType)

from api.party.models import Party as PartyModel
from helpers.googles_maps import verify_address
from helpers.auth.error_handler import SaveContextManager

# decorators
from helpers.auth.auth import Authentication

api_key = os.getenv('GOOGLE')


class Party(SQLAlchemyObjectType):
    """
        Autogenerated return type of a party
    """
    class Meta:
        model = PartyModel


class CreateParty(graphene.Mutation):
    """
        Mutation to create a user
    """
    class Arguments:
        party_name = graphene.String(required=True)
        hq_address = graphene.String(required=True)
        logo_url = graphene.String(required=True)
        status = graphene.String()

    party = graphene.Field(Party)

    @Authentication.login_required
    @Authentication.user_roles(['admin'])
    def mutate(self, info, **kwargs):
        hq_address = verify_address(api_key, kwargs['hq_address'])

        party = PartyModel(
            party_name=kwargs['party_name'],
            logo_url=kwargs['logo_url'],
            hq_address=hq_address
        )

        payload = {
            'model': PartyModel,
            'field': 'party_name',
            'value': kwargs['party_name']
        }
        with SaveContextManager(party, 'Party name', payload):
            return CreateParty(party=party)


class DeleteParty(graphene.Mutation):
    """
        Mutation to delete a party
    """

    class Arguments:
        party_id = graphene.Int(required=True)

    message = graphene.String()

    @Authentication.login_required
    @Authentication.user_roles(['admin'])
    def mutate(self, info, **kwargs):
        query = Party.get_query(info)

        party_query = query.filter(PartyModel.id == kwargs['party_id']).first()

        if party_query:
            party_query.delete()
            return DeleteParty(message=f"{party_query.party_name} party was deleted successfully")
        else:
            return GraphQLError('Party does not exist')


class allParties(graphene.ObjectType):
    """
        Get all parties
    """
    parties = graphene.List(Party)


class SingleParty(graphene.ObjectType):
    party = graphene.Field(Party)


class Query(graphene.ObjectType):
    all_parties = graphene.List(
        Party,
        limit=graphene.Int(),
        offset=graphene.Int(),
        description="Returns a list of all parties \
        \n- limit: Limit number of parties to return\
        \n- offset: Number of parties to skip")

    single_party = graphene.Field(
        SingleParty,
        party_id=graphene.Int(),
        description="Returns a party details and accepts argument\
            \n- office_id: A unique identifier of the party"
    )

    @Authentication.login_required
    def resolve_all_parties(self, info, **kwargs):
        # get all parties
        limit = kwargs.get('limit') or 10
        offset = kwargs.get('offset') or 0
        query = Party.get_query(info)
        parties = query.order_by(
            desc(PartyModel.created_at)).offset(offset).limit(limit)
        return parties

    @Authentication.login_required
    def resolve_single_party(self, info, party_id):
        query = Party.get_query(info)
        party = query.filter(PartyModel.id == party_id).first()
        if not party:
            raise GraphQLError("party not found")

        return SingleParty(party=party)


class Mutation(graphene.ObjectType):
    """
        Mutation to create a party
    """
    create_party = CreateParty.Field(
        description="Creates a new political party with the arguments\
            \n- party_name: The name field of the political party[required]\
            \n- hq_address: The hq_address field of the party[required]\
            \n- logo_url: The logo_url field of the party[required]\
            \n- status: The status field of the party, (new,updated)[required]")

    delete_party = DeleteParty.Field(
        description="Deletes an existing political party with the arguments\
            \n- party_id: Unique identifier for the party to be deleted[required]")
