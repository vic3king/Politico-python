import os
import graphene
from graphene_sqlalchemy import (SQLAlchemyObjectType)

from api.party.models import Party as PartyModel
from helpers.googles_maps import verify_address
from helpers.auth.error_handler import SaveContextManager

# decorators
from helpers.auth.auth import Authentication

api_key = os.getenv('GOOGLE')


class Party(SQLAlchemyObjectType):
    """
        Autogenerated return type of a user
    """
    class Meta:
        model = PartyModel


class CreateParty(graphene.Mutation):
    """
        Mutation to create a user
    """
    class Arguments:
        party_name = graphene.String(required=True)
        hq_address = graphene.String(required=True)
        logo_url = graphene.String(required=True)
        status = graphene.String()

    party = graphene.Field(Party)

    @Authentication.login_required
    @Authentication.user_roles(['politician'])
    def mutate(self, info, **kwargs):
        hq_address = verify_address(api_key, kwargs['hq_address'])

        party = PartyModel(
            party_name=kwargs['party_name'],
            logo_url=kwargs['logo_url'],
            hq_address=hq_address
        )

        payload = {
            'model': PartyModel,
            'field': 'party_name',
            'value': kwargs['party_name']
        }
        with SaveContextManager(party, 'Party name', payload):
            return CreateParty(party=party)


class Mutation(graphene.ObjectType):
    """
        Mutation to create user
    """
    create_party = CreateParty.Field(
        description="Creates a new political party with the arguments\
            \n- party_name: The name field of the political party[required]\
            \n- hq_address: The hq_address field of the party[required]\
            \n- logo_url: The logo_url field of the party[required]\
            \n- status: The status field of the party[required]")
