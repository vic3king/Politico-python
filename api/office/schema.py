import graphene
from graphene_sqlalchemy import (SQLAlchemyObjectType)

from api.office.models import Office as OfficeModel
from helpers.auth.error_handler import SaveContextManager
from utilities.validations import validate_entity_types

# decorators
from helpers.auth.auth import Authentication


class Office(SQLAlchemyObjectType):
    """
        Autogenerated return type of a office
    """
    class Meta:
        model = OfficeModel


class CreateOffice(graphene.Mutation):
    """
        Mutation to create a party
    """
    class Arguments:
        office_name = graphene.String(required=True)
        age_limit = graphene.Int(required=True)
        office_type = graphene.String()
        description = graphene.String(required=True)
        status = graphene.String()

    office = graphene.Field(Office)

    @Authentication.login_required
    @Authentication.user_roles(['admin'])
    def mutate(self, info, **kwargs):
        validate_entity_types(['state', 'legislative', 'federal', 'local_govenment'], 'office_type', **kwargs)  # noqa
        office = OfficeModel(**kwargs)

        payload = {
            'model': OfficeModel,
            'field': 'office_name',
            'value': kwargs['office_name']
        }
        with SaveContextManager(office, 'Office name', payload):
            return CreateOffice(office=office)


class Mutation(graphene.ObjectType):
    """
        Mutation to create an office
    """
    create_office = CreateOffice.Field(
        description="Creates a new political office with arguments\
            \n- office_name: The name of the political office[required]\
            \n- age_limit: The minimum age_limit for an office[required]\
            \n- office_type: type of office like state, federal[required]\
            \n- status: The status field of an office,(new, updated) [required]\
        "
    )
